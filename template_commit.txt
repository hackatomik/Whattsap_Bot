# ----------------------------------------------------------
# Primera línea: Algo breve pero descriptivo
#                de lo que se ha hecho
#                ¡Que sirva para algo! :-S
#                Que facilite las búsquedas si es preciso
# ----------------------------------------------------------
#    Debe empezar por uno de estos prefijos:
#    - WIP: si lleva trabajo sin terminar
#    - END: si es código final, listo para revisar
#
#    Además, según el tipo de código, debe llevar un de estos:
#    - #NNN: número de tarea a la que pertenece el trabajo
#    - BUG: cuando corrige un bug
#    - DOC: si se está tocando documentación
#    - REF: si es solo una refactorización
#    - IMG: si son retoques estéticos/de imagen
#    - PRF: retoques de rendimiento
#    - TST: código relacionado con tests
#    - CID: cambios al proceso de CI/CD
# ----------------------------------------------------------
#    Por ejemplo:
#    - WIP:#123: Nuevo formulario de crear usuario
#    - END:BUG: Problema con cálculo de hash
#    - WIP:DOC: Actualizado manual del alumno
# ----------------------------------------------------------


# ----------------------------------------------------------
# Info extra (opc)
# ----------------------------------------------------------
#    Si la línea anterior no tiene todo lo necesario
#    o si el id de tarea no existe, ofrecer detalles sobre
#    - por qué se han hecho los cambios
#    - detalles importantes sobre cambios
#    - posible rotura de compatibilidad
#    - cambios de funcionalidad
#    - etc...
# ----------------------------------------------------------


# ----------------------------------------------------------
# Recursos relacionados - Donde ver información extra (opc)
# ----------------------------------------------------------
#    Por ejemplo, urls a documentos internos/externos
#    sobre técnicas utilizadas, funcionalidad,
#    casos de uso, docs técnicos, etc..
# ----------------------------------------------------------


VERCIONADO
Según SemVer (Semantic Versioning), aquí hay una guía para aumentar el contador de cada sección de la versión:
**Major (semver-major)**
- Aumenta el contador de major cuando:
- Se rompe la compatibilidad con versiones anteriores.
- Se elimina una API obsoleta.
- Se rehacen funcionalidades existentes de manera significativa.
- Se cambia el modelo de datos o la estructura de la base de datos.
- Se cambia la forma en que se interactúa con la aplicación.
Ejemplos:
- Se cambia la forma en que se autenticación de usuarios.
- Se elimina una función que era fundamental para la aplicación.
- Se cambia la estructura de la base de datos.
**Minor**
- Aumenta el contador de minor cuando:
- Se agregan nuevas funcionalidades que no rompen la compatibilidad con versiones anteriores.
- Se mejoran funcionalidades existentes de manera significativa.
- Se agregan nuevas APIs o endpoints.
Ejemplos:
- Se agrega una nueva función para exportar datos.
- Se mejora la velocidad de carga de la aplicación.
- Se agrega un nuevo endpoint para una API.
**Patch**
- Aumenta el contador de patch cuando:
- Se corrigen errores menores o vulnerabilidades de seguridad.
- Se resuelven problemas de compatibilidad con versiones anteriores.
- Se actualizan dependencias o bibliotecas.
Ejemplos:
- Se corrige un error que causaba que la aplicación se cayera.
- Se actualiza una biblioteca para corregir una vulnerabilidad de seguridad.
- Se resuelve un problema de compatibilidad con una versión anterior.
**Build number (opcional)**
- Aumenta el contador de build number cuando:
- Se crea un nuevo build de la aplicación.
- Se actualiza el pipeline de construcción.
Ejemplos:
- Se crea un nuevo build para una versión de producción.
- Se actualiza el pipeline de construcción para incluir una nueva herramienta.

Recuerda que la versión debe seguir el formato `MAJOR.MINOR.PATCH`, y que el contador de build number es opcional. Por ejemplo: `1.2.3` o `1.2.3-456`.